# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import streamlit as st  # Th∆∞ vi·ªán Streamlit ƒë·ªÉ t·∫°o ·ª©ng d·ª•ng web t∆∞∆°ng t√°c
import pandas as pd     # Th∆∞ vi·ªán x·ª≠ l√Ω d·ªØ li·ªáu b·∫£ng
import plotly.express as px  # Th∆∞ vi·ªán v·∫Ω bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c
from sqlalchemy import create_engine  # T·∫°o k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu SQL
import time  # Th∆∞ vi·ªán ƒë·ªÉ s·ª≠ d·ª•ng sleep (ng·ªß ch·ªù)

    # ===================== C·∫§U H√åNH GIAO DI·ªÜN STREAMLIT =====================
    # Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ trang v√† b·ªë c·ª•c hi·ªÉn th·ªã (r·ªông to√†n m√†n h√¨nh)
#st.set_page_config(page_title="üéì Student Performance Dashboard", layout="wide")

def app():
    # ===================== K·∫æT N·ªêI C∆† S·ªû D·ªÆ LI·ªÜU ============================
    # T·∫°o k·∫øt n·ªëi t·ªõi PostgreSQL th√¥ng qua SQLAlchemy
    # ƒê·ªãnh d·∫°ng: 'postgresql://<username>:<password>@<host>:<port>/<database>'
    engine = create_engine('postgresql://postgres:123@localhost:5432/student_PB')


    # Ti√™u ƒë·ªÅ ch√≠nh c·ªßa trang dashboard
    st.title("üìä Real-Time Student Performance Dashboard")

    # ===================== SIDEBAR: CH·ªåN TH·ªúI GIAN REFRESH =================
    # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn kho·∫£ng th·ªùi gian l√†m m·ªõi d·ªØ li·ªáu (gi√¢y)
    refresh_interval = st.sidebar.slider("‚è± Refresh Interval (seconds)", 5, 60, 10)

    # ===================== H√ÄM LOAD D·ªÆ LI·ªÜU T·ª™ POSTGRESQL ==================
    # D√πng cache ƒë·ªÉ tr√°nh truy v·∫•n DB li√™n t·ª•c, TTL x√°c ƒë·ªãnh th·ªùi gian cache t·ªìn t·∫°i
    @st.cache_data(ttl=refresh_interval)
    def load_data():
        query = """
        SELECT s.student_id, s.first_name, s.last_name, s.gender, s.age, d.department_name,
            ap.total_score, ap.grade, ef.stress_level, ef.study_hours_per_week
        FROM students s
        JOIN departments d ON s.department_id = d.department_id
        JOIN academic_performance ap ON s.student_id = ap.student_id
        JOIN external_factors ef ON s.student_id = ef.student_id;
        """
        df = pd.read_sql(query, engine)  # Th·ª±c hi·ªán truy v·∫•n v√† l·∫•y d·ªØ li·ªáu d∆∞·ªõi d·∫°ng DataFrame
        return df

    # ===================== T·∫¢I D·ªÆ LI·ªÜU =====================
    df = load_data()

    # ===================== SIDEBAR: B·ªò L·ªåC D·ªÆ LI·ªÜU ==========================
    # B·ªô l·ªçc theo khoa (department)
    departments = st.sidebar.multiselect(
        "üè´ Ch·ªçn Khoa", 
        options=df['department_name'].unique(),  # Danh s√°ch khoa duy nh·∫•t
        default=df['department_name'].unique()   # M·∫∑c ƒë·ªãnh ch·ªçn t·∫•t c·∫£
    )

    # B·ªô l·ªçc theo gi·ªõi t√≠nh
    genders = st.sidebar.multiselect(
        "‚ößÔ∏è Gi·ªõi t√≠nh", 
        options=df['gender'].unique(), 
        default=df['gender'].unique()
    )

    # ===================== √ÅP D·ª§NG B·ªò L·ªåC ============================
    filtered_df = df[
        (df['department_name'].isin(departments)) & 
        (df['gender'].isin(genders))
    ]

    # ===================== HI·ªÇN TH·ªä METRIC ===========================
    # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng sinh vi√™n theo b·ªô l·ªçc
    st.metric("üë©‚Äçüéì S·ªë sinh vi√™n", len(filtered_df))

    # ===================== BI·ªÇU ƒê·ªí 1: Histogram ƒëi·ªÉm t·ªïng ===================
    # Bi·ªÉu ƒë·ªì histogram th·ªÉ hi·ªán ph√¢n ph·ªëi ƒëi·ªÉm t·ªïng c·ªßa sinh vi√™n
    fig1 = px.histogram(
        filtered_df, 
        x="total_score", 
        nbins=20, 
        title="üìà Ph√¢n ph·ªëi ƒëi·ªÉm t·ªïng"
    )
    st.plotly_chart(fig1, use_container_width=True)

    # ===================== BI·ªÇU ƒê·ªí 2: Trung b√¨nh Stress theo khoa ===========
    # T√≠nh trung b√¨nh stress theo t·ª´ng khoa
    stress_avg = filtered_df.groupby("department_name")["stress_level"].mean().reset_index()

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
    fig2 = px.bar(
        stress_avg, 
        x="department_name", 
        y="stress_level", 
        title="üò£ Trung b√¨nh Stress theo Khoa"
    )
    st.plotly_chart(fig2, use_container_width=True)

    # ===================== BI·ªÇU ƒê·ªí 3: Pie chart ph√¢n lo·∫°i theo Grade ========
    # ƒê·∫øm s·ªë l∆∞·ª£ng sinh vi√™n theo Grade
    grade_count = filtered_df['grade'].value_counts().reset_index()
    grade_count.columns = ['grade', 'count']  # ƒê·∫∑t l·∫°i t√™n c·ªôt

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n
    fig3 = px.pie(
        grade_count, 
        names='grade', 
        values='count', 
        title="üéØ Ph√¢n lo·∫°i sinh vi√™n theo Grade"
    )
    st.plotly_chart(fig3, use_container_width=True)

    # ===================== T·ª∞ ƒê·ªòNG REFRESH GIAO DI·ªÜN ========================
    # Th√¥ng b√°o cho ng∆∞·ªùi d√πng bi·∫øt s·∫Ω t·ª± ƒë·ªông l√†m m·ªõi sau X gi√¢y
    st.info(f"T·ª± ƒë·ªông l√†m m·ªõi sau {refresh_interval} gi√¢y...")

    # T·∫°m d·ª´ng ch∆∞∆°ng tr√¨nh trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
    time.sleep(refresh_interval)

    # G·ªçi l·∫°i script t·ª´ ƒë·∫ßu (ƒë·ªÉ th·ª±c hi·ªán c·∫≠p nh·∫≠t d·ªØ li·ªáu)
    st.rerun()  # D√πng trong Streamlit >= 1.27, thay cho st.experimental_rerun()
